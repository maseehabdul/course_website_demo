name: Secure Code Review

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  OUTPUT_FILE_1: "tool_output.json"
  OUTPUT_FILE_2: "parsed_output.json"
  TOOL_FILE: "truzta"
  PY_FILE: "send_results.py"

jobs:
  sast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for accurate commit tracking

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
          pip install requests

      - name: Download scanning tools
        env:
          APP_DOMAIN: ${{ secrets.APP_DOMAIN }}
        run: |
          # Check if APP_DOMAIN is set
          if [ -z "$APP_DOMAIN" ]; then
            echo "ERROR: APP_DOMAIN secret is not set!"
            echo "Please add APP_DOMAIN to GitHub Secrets (Settings → Secrets and variables → Actions)"
            exit 1
          fi

          echo "Downloading from: ${APP_DOMAIN}"

          # Download truzta binary from your API
          curl -O ${APP_DOMAIN}/v1/secure-code/static/truzta
          chmod +x truzta

          # Try to download GitHub-specific version first, fallback to regular version
          if curl -f -O ${APP_DOMAIN}/v1/secure-code/static/send_results_github.py 2>/dev/null; then
            echo "Downloaded send_results_github.py"
            mv send_results_github.py send_results.py
          else
            echo "send_results_github.py not found, downloading send_results.py"
            curl -O ${APP_DOMAIN}/v1/secure-code/static/send_results.py
          fi

          chmod +x send_results.py

          # Verify downloads
          ls -la
          echo "Current directory: $(pwd)"

      - name: Run security scan
        env:
          TOKEN: ${{ secrets.SECURECODETOKEN }}
          APP_DOMAIN: ${{ secrets.APP_DOMAIN }}
          REPOSITORY: ${{ github.repository }}
          CI_COMMIT_SHA: ${{ github.sha }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # Execute the security scan
          python3 send_results.py

      - name: Cleanup
        if: always()
        run: |
          # Remove temporary files
          rm -f $OUTPUT_FILE_1
          rm -f $OUTPUT_FILE_2
          rm -f $TOOL_FILE
          rm -f $PY_FILE

          # Verify cleanup
          ls -la

      - name: Upload scan results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secure-code-scan-results
          path: |
            tool_output.json
            parsed_output.json
          retention-days: 30
          if-no-files-found: ignore
